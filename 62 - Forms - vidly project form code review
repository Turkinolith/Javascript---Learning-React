***************************************
**** Validation Form - Code Review ****
***************************************
The login form has a fair amount of code, I don't want to repeat all of it, especially the validation portion, every time I build a new form. 
So, I'll quickly overview the code and decide which parts I can extract and put in a reusable component.

1st - State, what is reusable here? 
	Well, I want every form to have an errors property in the state object.

2nd - What about the schema? No, its specific to log-in.

3rd - Validate method? Do I see anything about log-in there? No, this is completely reusable part of code. The only tricky part is the first argument to the validate method. (this.state.account)
	I'm not going to have that account option in every form. So what should I do here? I could come up with a convention and assume in all forms in the "State" object we have a property called "Data" that 
	represents the data behind that form. Here that data should be set to an "account" object, and in another forms Data will be set to a different kind of object. 
	With this simple convention I can easily extract the validate method and put it in a reusable component.

4th - The same is true for ValidateProperty as for Validate. 	

5th - What about handleSubmit? This is interesting as the first part is reusable, as every time I build a form in React I want to disable the default behavior, I don't want to post the whole form to the server.
	Also everytime the user clicks the submit button I want to validate the data and if there are any errors I want to return. I don't want to continue.
	But, what happens after is dependent upon what kind of form I'm building.
	
6th - What about handleChange? Again, this is reusable as every time someone types something into the input field I want to validate that input field but I also want to update the state.
	Once agian here I'm referencing the account object, but if I rename that field to "Data" I'll have a completely reusable piece of logic.
	
7th - The render method. Obviously what I return here is dependent on what kind of form I'm building.

8th - The Submit button, aside from the button label, everything else else here is reusable. For example I want to disable the button when the input form is invalid. Similarly I want to import those bootstrap classes.

Next, I'll refactor the code step by step and extract a reusable form component.



For reference here is the code for the loginForm.jsx as it stands for this review:

import React, { Component } from "react";
import Joi from "@hapi/joi";
import Input from "./common/input";
class LoginForm extends Component {
  state = {
    account: { username: "", password: "" },
    errors: {}
  };

  schema = {
    username: Joi.string()
      .alphanum()
      .min(3)
      .required()
      .label("Username"),
    password: Joi.string()
      .min(5)
      .required()
      .label("Password")
  };

  validate = () => {
    const localSchema = Joi.object(this.schema);
    const validateOption = { abortEarly: false };
    const { error } = localSchema.validate(this.state.account, validateOption);
    if (!error) return null;

    const errors = {};
    for (let item of error.details) errors[item.path[0]] = item.message;
    return errors;
  };

  handleSubmit = event => {
    event.preventDefault();

    const errors = this.validate();
    this.setState({ errors: errors || {} });
    if (errors) return;
    // TODO: call the server, save the changes, and then redirect the user to a different page.
    console.log("Submitted");
  };

  validateProperty = ({ name, value }) => {
    const obj = { [name]: value };
    const localSchema = Joi.object({ [name]: this.schema[name] });
    const { error } = localSchema.validate(obj);
    return error ? error.details[0].message : null;
  };

  handleChange = ({ currentTarget: input }) => {
    const errors = { ...this.state.errors };
    const errorMessage = this.validateProperty(input);
    if (errorMessage) errors[input.name] = errorMessage;
    else delete errors[input.name];

    const account = { ...this.state.account };
    account[input.name] = input.value;
    this.setState({ account, errors });
  };

  render() {
    const { account, errors } = this.state;

    return (
      <div>
        <h1>Login</h1>
        <form onSubmit={this.handleSubmit}>
          <Input
            name="username"
            value={account.username}
            label="Username"
            onChange={this.handleChange}
            error={errors.username}
          />
          <Input
            name="password"
            value={account.password}
            label="Password"
            onChange={this.handleChange}
            error={errors.password}
          />
          <button disabled={this.validate()} className="btn btn-primary">
            Login
          </button>
        </form>
      </div>
    );
  }
}

export default LoginForm;
