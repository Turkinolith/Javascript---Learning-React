****************************************************
**** How to use Context API in Class Components ****
****************************************************

#1 - Set up project structure for the demo.
Set up a react project with the following folder structure to represent a hierarchy.
app.js -> [context folder] -> MoviePage.jsx & MovieList.jsx
So we have app.js on the top, below that is a MoviePage, then inside that is MovieList, but both page and list are in the same folder.

MovieList:
Create a class component called MovieList that simply returns a <div>Movie List</div>;

MoviePage.jsx:
create a class component MoviePage, it imports MovieList, and renders <MovieList /> within its <div>

App.js:
For this demo use the app component as a class that renders <MoviePage />


#2. Define State
Now, lets say App stores the currentUser. And we want to access it within MovieList for some reason, like displaying an edit link if the user is logged in.

Define State:
In the app component lets make a state object:
	state = { currentUser: {name: "Larry" } }
So, now we have a state object, that has currentUser, which is itself an object that has a single key/value pair.

To pass the state down, we need to now create a context object, this will be stored in its own file.


#3. Create a Context File to serve a Context Object.
Lets create a new file named userContext.js, in a real app I'd have a different file for each context that I'm passing around.

** Create the Context Object **
In this file first I need to import react.
	import React from 'react';
	
Next, call React.createContext(), this will return a context object.
**NOTE: By convention I should name that object using the Pascal naming convention, same as naming components.
	const UserContext = React.createContext();

Finally, this should be exported:
	export default UserContext;

So, first step is to create the Context object, that is now done. The second step is to provide this in the top component, in this case the App component where I'll provide the user context.


#4 Import the UserContext file into App.js.
Next, I have to wrap the return elements of the render method with a provider component. <UserContext. <-- There are 3 properties of this object here, "Consumer, Provider, and displayName" In this case I'll use "Provider"
	render() {
	  return (
	    <UserContext.Provider>
			<div>
			  <MoviePage />
			</div>
		</UserContext.Provider>
		);
	}

So, I'm wrapping those elements inside of a Provider component. This is nothing magicial, its just like a regular React component.
It has a special prop called value which is where I can pass an object down the component tree. 

	render() {
	  return (
	    <UserContext.Provider value={this.state.currentUser}>
			<div>
			  <MoviePage />
			</div>
		</UserContext.Provider>
		);
	}


#5 The next step is to consume this context somewhere in the component tree.
We can go to any component, in this case I'll go to the MovieList, and consume the UserContext.

in MovieList.jsx, first import the UserContext module.

Next, I need to wrap the component return elements of the render method inside of a Consumer element, just like how I wrapped the output of App.js in a Provider component.
	render() {
	  return (
	    <UserContext.Consumer>
			<div>
			  Movie List
			</div>
		</UserContext.Consumer>
		);
	}


#6 Here is the tricky part, 
The Consumer component expects a function as a child. So I can not pass the "<div>Movie List</div>" section as in the code block above, else I'll get a run-time error.

How to fix this? Pass a lambda expression, the parameter can be called anything: IE: value, or in this case I'll say "userContext"

	render() {
	  return (
	    <UserContext.Consumer>
		  { userContext => }
		</UserContext.Consumer>
		);
	}

And in the result of that lambda expression is where we return our element that we want.

	render() {
	  return (
	    <UserContext.Consumer>
		  { userContext => <div>Movie List</div> }
		</UserContext.Consumer>
		);
	}


#7 Setting Context Display Name
Now, if I view the components in dev tools this is the structure:
App -> Context.Provider -> MoviePage -> MovieList -> Context.Consumer

Note that the names Context.Provider and Context.Consumer are not very descriptive, because they are autogenerated. This can quickly become
confusing when there are multiple Contexts being shared. 
Each context can be named using the aforementioned Context.displayName property.

Inside the userContext.js, after the UserContext object is created set UserContext.displayName to a specific name.
	UserContext.displayName = "UserContext";

Now, back in the components tab of dev tools it looks like this:
App -> UserContext.Provider -> MoviePage -> MovieList -> UserContext.Consumer


#8 Using the Context.
If you look at the UserContext.Consumer component in Dev Tools, it has a context object within it. In this case it is an object with a property "name" set to "Larry"
This is the current user, so we can get the name of the current user and now use it within the MovieList component.

So, in the MovieList component:
the "userContext" that is in the code block here:
	render() {
	  return (
	    <UserContext.Consumer>
		  { userContext => <div>Movie List</div> }
		</UserContext.Consumer>
		);
	}
Is exactly the same as in the dev tools example in #7 above.

So, I can render it this way:
	render() {
	  return (
	    <UserContext.Consumer>
		  { userContext => <div>Movie List {userContext.name}</div> }
		</UserContext.Consumer>
		);
	}



This is how to use the context API, First create a context object, then Provide it, finally Consume it.


#9 Using context outside of rendering.
What if I want to consume context outside of the render method?
Example would be in a lifecycle hook like componentDidMount where I wouldn't have access to the <UserContext> component.

There are a few ways:
	#A - 
		After creating the class, IE after rendering but before exporting, explicitly set a static property of the class: (IE: a property of the class itself, not an object generated by it)
		(still in MovieList.jsx)
			MovieList.contextType = UserContext;
		To use the static property in the componentDidMount() example, this will return the current user object.
			componentDidMount() {
			  console.log("context", this.context)
			}

	#B -
		Instead of setting the context after creating the class in #A, we can set the property as part of creating the class.
			class MovieList extends Component {
			  static contextType = UserContext;
			  
			  componentDidMount() {
			    console.log("context", this.context);
			  }



